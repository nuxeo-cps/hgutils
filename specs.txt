===============================
Specification for the hgbundler
===============================

Purpose
=======

Replace svn externals and bundleman

File format and organisation
============================

A bundle is a directory with a manifest file listing all involved
repositories, where to find them, etc. Once cloned, the involved
repositories will be toplevel subdirectories of the bundle.

The bundle can itself be a mercurial repository, or a directory in a
repository (use-case: CPS-3-full, CPS-3-base, CPS-3-legacy can all be
versioned together).

The manifest file is called BUNDLE_MANIFEST.xml. The xml format is as in
the following example::

  <?xml version="1.0"?>
  <bundle name="CPS-example">
    <server name="racinet"
            url="ssh://mercurial.racinet.org//home/mercurial/CPS">
      <tag name="CPS-3.4.0" path="products/CPSSchemas"/>
      <branch path="products/CPSDefault"/> <!-- default branch, aka trunk -->
      <branch name="unicode" path="products/CPSDocument"/>
    </server>
  </bundle>

This declares three components, available as repositories at the given server
url. For instance, the repository for the first would be::

  ssh://mercurial.racinet.org//home/mercurial/CPS/products/CPSSchemas

As you can see, there are two types of components: tags and
branches. The trunk being in Mercurial the default branch, there's no
need to make a special case for it.

There is an optional attribute to specify the default server
to push to. See the section about paths in ```man hgrc```. Example::

  <server name="CPS products at Nuxeo"
          url="http://hgcps.nuxeo.org"
          push-url="https://hgcps.nuxeo.org">

The name attribute is totally optional and isn't leveraged much right
now (for error messages mostly).

Deeper svn externals
--------------------

There were some cases in the CPS subversion server where externals
were used to point *inside* a product or a directory that's been
exported as a repository (at least in ``CPSTramline``, in
``nuxeo.lucene``).

This is not part of mercurial logic to clone or export a part of a
repo. Instead, we provide a workaround. The syntax is as follows
(CPS-3-full bundle excerpt)::

    <branch name="gracinet-fix-range"
            target="CPSTramline/tramlinepath" path="tramline"
            subpath="src/tramline/path"/>

This results in a ``src/tramline/path`` subdirectory of a
``tramline`` clone being symlinked as ``CPSTramline/tramlinepath``.
The clone itself is stored in a hidden directory of the bundle
(currently in ``.hgbundler``). Update operations will log the path
to the clone.

The <include-bundles> directive
-------------------------------

To avoid repeating over and over a big list of references, you may
specify bundles to include. Example for the CPS-3-full bundle::

   <include-bundles
       server-url="ssh://mercurial.racinet.org//home/mercurial/CPS">
     <branch target="CPS-3-full" path="bundles" subpath="CPS-3-full"/>
   </include-bundles>

Remarks::

 - inclusion nesting is neither possible nor planned

 - releasing (see below) a bundle with inclusions behaves
   exactly as if one had copy-pasted the included bundle in the
   bundle being released. In particular, this does *not*
   release the included bundle, but releases the components if
   needed. There aren't any more includes in the resulting bundle tag.

Planned options::

 - including, with a change of server urls
 - ignore some products while including (use-case:
   private branch for a product, specified somewhere else in
   the manifest)


OPERATIONS
==========

hgmap <hg command> <arguments> Prio: 1
--------------------------------------

This is the simplest: map the given hg command over all hg clones
present in the directory. Completely unaware of the bundle definition.

This avoids making useless hgbundler commands for ``push``, ``pull``, ``update``

Also, this way, destructive operations like push/pull are explicit.

hgbundler make-clones (implemented)
-----------------------------------

This uses the server urls and the paths to clone all the involved
repositories in the bundle directory.
Automatically followed by ``update-clones``

hgbundler update-clones (implemented)
-------------------------------------

Each clone is updated on the tag or branch specified in the
manifest.

Question: should this command also create missing clones ?

hgbundler clones-refresh-url (implemented)
------------------------------------------

This refreshes clones default paths (specified
in ``.hg/hgrc`` files ) to base them on the bundle server urls.

Use cases: severe the link from the public server while making a private
bundle from a public one

Question: find a better name ?

hgbundler refresh-urls-from-clones Prio: 3
------------------------------------------

Update servers and paths of the bundle from the clone default paths. This is the
converse of ``clones-refresh-url``

Use case: make one of the clones point to a private server
(for a local branch, for instance). Then update the bundle to take
that into account.

Problem: this method will probably need to create new server objects,
but it won't have just one possibility for that (cutting a path is not
unique). OTOH, one can assume that just a few repos have been
relocated in the typical use-case, i.e. it's simpler for the user to
edit the BUNDLE_MANIFEST and copy/paste from hgrc, than for us to implement a
complicated and unsatisfactory logic.


hgbundler release [tag] Prio: 4
-------------------------------

For a bundle that happens to be also its own mercurial repository.

 - branch the bundle (name of the branch?)
 - make a release of each of the <branch> clones (assume we have the equivalent
   of ``bm-product`` for that purpose ; in the meanwhile, just make a tag)
 - modify the bundle in the created branch to point to the new tags, commit
 - tag the bundle
 - get back to default branch of the bundle

Pushing the bundle to a reference repo is to be made manually afterwards.


Question: commands semantics in the case where there are several
bundles in a single repo (case for CPS-3-full, CPS-3-base, etc). Two
cases :
  - release each bundle
  - release just one

hgbundler archive [tag] Prio: 4
-------------------------------

Produce a tgz archive for the given tag (recursively calls archive on
each clone for the corresponding tag)


hgbundler make-bundle (Prio: 5)
-------------------------------

Create the manifest file in the current directory from the clones that
can be found there (choices tags/branches ?)

EXAMPLE
=======

I have a project for my client, involving some CPS3 products, and
two specific products: CL1 and CL2.

Project Creation
----------------

 + Creation of the bundle on the dev machine
 + Creation of repos on the reference priv server




